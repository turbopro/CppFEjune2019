Q1
Which statement is false about interfaces?

A function working with an interface can work with any set of unrelated classes as long as they implement that interface.
*** Interfaces are allowed to provide default implementations.
There is not interface construct in C++ but they can be emulated using abstract classes/functions.
Interfaces can be used instead of inheritance when there is no 'ISA' relation.


Question 2
Which statement is true about destructors and inheritance?

Destructors must be virtual so that the base class destructor is called when a derived class object is removed from memory.
Destructors must be virtual because the canonical header file requires that.
***Destructors must be virtual so that derived class objects in a base class variable will be deleted correctly.
The system provided destructor is always called correctly.


Question 3
Which statement is true about aggregation (open diamond shape in UML) and composition (filled diamond shape in UML)

With aggregation the lifetime of the embedded object is the same as the 'outer' object while with composition the lifetime can be different.
There is no difference between aggregation and composition.
***With composition the lifetime of the embedded object is the same as the 'outer' object while with aggregation the lifetime can be different.
Aggregation embeds multiple objects while composition only embeds one object.


Question 4
Which statement is true about inheritance?

Friends of the base class are also friends of the derived class.
All members of the base class are inherited except the constructors, destructor and assignment operator.
*** Operator functions of the base class are not inherited.
All member of the base class are inherited.


Question 5
Which statement is false about an abstract class?

Abstract classes can contain member data.
Abstract classes enable us to work uniformly with a set of related classes.
***Abstract classes can only have function declarations, no function implementations.
Abstract classes cannot be instantiated.


Question 6
What is the output of the following program?
C++:
class A
{
private:
  int m_da;
public:
  A(int da): m_da(da) {}
  int GetA() { return m_da; }
  A& operator = (const A& source) 
  { m_da=source.m_da; return *this; }
};
class B: public A
{
private:
  int m_db;
public:
  B(int da, int db): A(da), m_db(db) {}
  int GetB() { return m_db; }
  B& operator = (const B& source) 
  { m_db=source.m_db; return *this; }
};
int main()
{
  B b1(10, 20); B b2(30, 40);
  b1=b2;
  std::cout<<b1.GetA()<<", "<<b1.GetB()<<std::endl;
  return 0;
}

10, 20
***10, 40
30, 20
30, 40


Question 7
What is the output of the following program?
C++:
class A
{
public:
  virtual std::string F() { return "A"; }
};
class B: public A
{
public:
  std::string F() { return "B"; }
};
int main()
{
  A a; B b;
  A* ap;
  std::cout<<a.F()<<", ";
  std::cout<<b.F()<<", ";
  ap=&a; std::cout<<ap->F()<<", ";
  ap=&b; std::cout<<ap->F()<<std::endl;
  return 0;
}

A, A, A, A
***A, B, A, B
This code does not compile because the derived class function F() must also be virtual.
A, B, A, A


Question 8
What is the output of the following program?
C++:
class A
{
private:
  int m_data;
public:
  A(): m_data(GetValue()) {}
  int Calculate() { return m_data*1.5; }
  virtual int GetValue() { return 10; }
};
class B: public A
{
public:
  virtual int GetValue() { return 20; }
};
int main()
{
  A a; B b; A* ap;
  ap=&a; std::cout<<ap->GetValue()<<", "<<ap->Calculate()<<", ";
  ap=&b; std::cout<<ap->GetValue()<<", "<<ap->Calculate()<<std::endl;
  return 0;
}

***10, 15, 20, 15

10, 15, 20, 30
This code does not compile.
10, 15, 10, 15


Question 9
Which statement is false about the colon syntax?

The colon syntax is more efficient when initialising complex data members.
The colon syntax must be used to initialise reference data members.
The colon syntax must be used to initialise const data members.
***The colon syntax is just another way to initialise your data members. No performance advantages.


Question 10
Which statement is false about aggregation?

Aggregation can hide the functionality of the aggregated object.
With aggregation you create an object that consists of one or more other objects.
***Aggregation is a special kind of inheritance.
Aggregation is often combined with delegation to delegate functionality to another object.



Blue Nile:	Exchange orders can only be created by phone Vernon on 800 242 2728
Order number: 77416949 
RMA: 999859019



==============================
Level 5.1_Ex1

code for nitty gritty Point and Line objects

/*
		// create Array of regular pointers to Point objects
		cout << "\n\nCreate array of regular pointers to Point objects:\n";
		Array<Point*> ptr_parr1(arr_size);

		cout << "\nSize of ptr_parr1: " << ptr_parr1.Size() << endl
			<< "Type of ptr_parr1: " << typeid(ptr_parr1).name() << endl
			<< "ptr_parr1[1]: " << typeid(ptr_parr1[1]).name() << endl << endl;

		// set values of the Point objects pointed to by the regular pointers
		cout << "\nSet values of the Point objects pointed to by the regular pointers:\n\n";
		for (int i = 0; i < ptr_parr1.Size(); i++)
		{
			ptr_parr1[i] = new Point((rand() % 20) * 0.93, (rand() % 10) * 0.72);
			cout << "ptr_parr1[" << i << "] points to: "
				<< ptr_parr1[i]->ToString() << endl;
		}

		// create a dynamically allocated Point with regular pointer
		cout << "\n\nCreate a dynamically allocated Point object via a regular Point pointer:\n";
		Point* ppt0 = new Point(3.7, 4.13);
		cout << "\nppt0 points to: " << ppt0->ToString() << endl
			<< "Type of ppt0: " << typeid(ppt0).name() << endl << endl;

		// create a dynamically allocated Point with shared_ptr
		cout << "\nCreate a dynamically allocated Point object via a shared_ptr:\n";
		PointPtr sptr0(new Point(6, 8));
		cout << "\nsptr0 points to: " << sptr0->ToString() << endl
			<< "Type of sptr0: " << typeid(sptr0).name() << endl
			<< "sptr0 use_count: " << sptr0.use_count() << endl << endl;

		// set sptr_parr0[0] to point to same Point object as pointed to by sptr0
		cout << "\nSet sptr_parr0[0] to point to same Point object as sptr0:\n";
		sptr_parr0.SetElement(sptr0, 0);
		
		cout << "\n\nsptr_parr0[0] and sptr0 point to the same Point object\n"
			<< "\nsptr_parr0[0] points to: " << sptr_parr0[0]->ToString() << endl
			<< "\tsptr0 points to: " << sptr0->ToString() << endl
			<< "\nsptr_parr0[0] use_count: " << sptr_parr0[0].use_count() << endl
			<< "\tsptr0 use_count: " << sptr0.use_count() << endl << endl;
		
		// terminate Points dynamically allocated by regular Point pointers
		cout << "\nManually terminate Point objects dynamically allocated by regular Point pointers"
			<< "\nTerminate ppt0:\n";
		delete ppt0;

		// delete regular pointers to dynamically allocated Point objects
		cout << "\nDelete regular pointers to dynamically allocated Point objects:\n\n";
		for (int i = 0; i < arr_size; i++)
			delete ptr_parr1[i];

		cout << "\n\nLeaving block\n" 
			<< "\nArrays (with built-in destructors) and Point objects dynamically\n" 
			<< "allocated by smart_ptrs will self destruct now:\n\n";

		*/
	}

	/*
	// Typedef for a shared pointer to shape and
	// a typedef for an array with shapes stored as shared pointers.
	typedef boost::shared_ptr<Line> LinePtr;
	typedef Array<LinePtr> lnArray;

	// the below code runs in a block to create Line objects via shared_ptrs
	// at the end of the block, we observe the shared_ptr destructors at work automagically
	{
		cout << "\n\n"
			<< "|========================================|\n"
			<< "|            2: LINE objects             |\n"
			<< "|========================================|\n";
		// create array of shared pointers to Point objects
		cout << "\nInside second block:\n\n"
			<< "\nCreate array of shared_ptrs to Line objects:\n";
		lnArray sptr_larr0(arr_size);

		cout << "\nSize of sptr_larr0: " << sptr_larr0.Size() << endl
			<< "Type of sptr_larr0: " << typeid(sptr_larr0).name() << endl
			<< "sptr_larr0[0]: " << typeid(sptr_larr0[0]).name() << endl
			<< "sptr_larr0[0] use_count: " << sptr_larr0[0].use_count() << endl << endl;

		// set Line objects values: reset nullptrs created as default for the
		// sptr_larr0 array of shared_ptrs to Line objects
		cout << "\n'reset' nullptrs to Line objects and set values for Line objects:\n\n";
		for (int i = 0; i < sptr_larr0.Size(); i++)
		{
			sptr_larr0[i].reset(new Line(Point(rand() % 30, rand() % 10), 
				Point(rand() % 50, rand() % 25)));
			cout << "sptr_larr0[" << i << "] points to: "
				<< sptr_larr0[i]->ToString() << endl;
		}

		// create Array of regular pointers to Line objects
		cout << "\n\nCreate array of regular pointers to Line objects:\n";
		Array<Line*> ptr_larr1(arr_size);

		cout << "\nSize of ptr_larr1: " << ptr_larr1.Size() << endl
			<< "Type of ptr_larr1: " << typeid(ptr_larr1).name() << endl
			<< "ptr_larr1[1]: " << typeid(ptr_larr1[1]).name() << endl << endl;

		// set values of the Line objects pointed to by the regular pointers
		cout << "\nSet values of the Line objects pointed to by the regular pointers:\n\n";
		for (int i = 0; i < ptr_larr1.Size(); i++)
		{
			ptr_larr1[i] = new Line(Point((rand() % 30 * 0.45), (rand() % 10 * 1.12)),
				Point((rand() % 50 * 0.34), (rand() % 25 * 1.05)));
			cout << "ptr_larr1[" << i << "] points to: "
				<< ptr_larr1[i]->ToString() << endl;
		}

		// create a dynamically allocated Line with regular pointer
		cout << "\n\nCreate a dynamically allocated Line object via a regular Line pointer:\n";
		Line* lpt0 = new Line(Point(3.7, 4.13), Point(1.4, 6.9));
		cout << "\nlpt0 points to: " << lpt0->ToString() << endl
			<< "Type of lpt0: " << typeid(lpt0).name() << endl << endl;

		// create a dynamically allocated Line with shared_ptr
		cout << "\nCreate a dynamically allocated Line object via a shared_ptr:\n";
		LinePtr sptr0(new Line(Point(3.7, 4.13), Point(1.4, 6.9)));
		cout << "\nsptr0 points to: " << sptr0->ToString() << endl
			<< "Type of sptr0: " << typeid(sptr0).name() << endl
			<< "sptr0 use_count: " << sptr0.use_count() << endl << endl;

		// set sptr_larr0[0] to point to same Line object as pointed to by sptr0
		cout << "\nSet sptr_larr0[0] to point to same Line object as sptr0:\n";
		sptr_larr0.SetElement(sptr0, 0);

		cout << "\n\nsptr_larr0[0] and sptr0 point to the same Line object\n"
			<< "\nsptr_larr0[0] points to: " << sptr_larr0[0]->ToString() << endl
			<< "\tsptr0 points to: " << sptr0->ToString() << endl
			<< "\nsptr_larr0[0] use_count: " << sptr_larr0[0].use_count() << endl
			<< "\tsptr0 use_count: " << sptr0.use_count() << endl << endl;

		// terminate Lines dynamically allocated by regular Line pointers
		cout << "\nManually terminate Line objects dynamically allocated by regular Line pointers"
			<< "\nTerminate lpt0:\n";
		delete lpt0;

		// delete regular pointers to dynamically allocated Line objects
		cout << "\nDelete regular pointers to dynamically allocated Line objects:\n\n";
		for (int i = 0; i < arr_size; i++)
			delete ptr_larr1[i];

		cout << "\n\nLeaving block\n"
			<< "\nArrays (with built-in destructors) and Line objects dynamically\n"
			<< "allocated by smart_ptrs will self destruct now:\n\n";